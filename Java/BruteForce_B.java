/*
 * author: Simone Chong Sze Mun
 * file: BruteForce_B.java
 */

import java.security.MessageDigest;
import java.security.NoSuchAlgorithmException;
import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;

public class BruteForce_B extends javax.swing.JFrame {

    /**
     * Creates new form BruteForce_B
     */
    public BruteForce_B() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        responseBox = new javax.swing.JTextArea();
        inputBox = new javax.swing.JTextField();
        jButton1 = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("BCH Brute Force");
        setLocation(new java.awt.Point(450, 250));

        jScrollPane1.setHorizontalScrollBarPolicy(javax.swing.ScrollPaneConstants.HORIZONTAL_SCROLLBAR_NEVER);
        jScrollPane1.setVerticalScrollBarPolicy(javax.swing.ScrollPaneConstants.VERTICAL_SCROLLBAR_NEVER);

        responseBox.setEditable(false);
        responseBox.setColumns(20);
        responseBox.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        responseBox.setLineWrap(true);
        responseBox.setRows(5);
        responseBox.setBorder(null);
        jScrollPane1.setViewportView(responseBox);

        inputBox.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        inputBox.setText("Enter hash");
        inputBox.setBorder(null);
        inputBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                inputBoxActionPerformed(evt);
            }
        });

        jButton1.setText("Enter");
        jButton1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jButton1MouseClicked(evt);
            }
        });
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(122, 122, 122)
                .addComponent(inputBox)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jButton1)
                .addGap(67, 67, 67))
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 589, Short.MAX_VALUE)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(36, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(inputBox, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButton1))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 97, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(20, 20, 20))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void inputBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_inputBoxActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_inputBoxActionPerformed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        // TODO add your handling code here:
        
    }//GEN-LAST:event_jButton1ActionPerformed

    private void jButton1MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jButton1MouseClicked
        // TODO add your handling code here:
        boolean check = true;
        String input = "";
        String inputhash = "";
        
        timeStart();

        //Retrieve user input
        input = inputBox.getText();
        
        //validate input
        if (!strCheck(input)) {
            
            //If the input is not valid
            responseBox.setText("Invalid input.");
            
        } else {
            
            try {
            generateBCH(input);
            timeStop("showMin");
            } 
            catch (NoSuchAlgorithmException e){
                e.printStackTrace();
            }
            
        } //end if else       
    }
    
        // a variable to remember the start time,  use the following methods 
    long timer = 0;

    void timeStart() {
        timer = System.currentTimeMillis();
    }

    void timeStop(String s) {
        timer = System.currentTimeMillis() - timer;
        if (s.equals("showMs") || s.equals("")) {
            responseBox.append("\nTime taken is " + timer + "  milliseconds");
        } else if (s.equals("showSec")) {
            responseBox.append("\nTime taken is " + timer / 1000 + " seconds");
        } else if (s.equals("showMin")) {
            responseBox.append("\nTime taken is " + timer / 60000 + " minutes and "+ (timer % 60000) / 1000 + " seconds");
        }
    }


    public static String SHA1(String input) throws NoSuchAlgorithmException {
        //Initialize messageDigest and set algorithm
        MessageDigest md = MessageDigest.getInstance("SHA-1");
        byte[] inputInBytes = md.digest(input.getBytes());

        //Convert byte array to hash
        String result = "";
        for (int i = 0; i < inputInBytes.length; i++) {
            result += Integer.toString((inputInBytes[i] & 0xff) + 0x100, 16).substring(1);
        }
        return result;
    }

    public static void generateBCH(String target) throws NoSuchAlgorithmException {
        boolean search = false;
        StringBuilder test;
        int[] d = new int[10];

        for (int i = 0; i <= 999999 && !search; i++) {
            test = new StringBuilder(Integer.toString(i));
            
            while (test.length() < 6 && !search) {
                test.insert(0, "0");
            }

             //Convert string input to array
            for (int j = 0; j < test.length(); j++) {
               d[j] = Character.getNumericValue(test.charAt(j));
               
            }

            //Generate last 4 digits
            d[6] = (4 * d[0] + 10 * d[1] + 9 * d[2] + 2 * d[3] + d[4] + 7 * d[5]) % 11;
            d[7] = (7 * d[0] + 8 * d[1] + 7 * d[2] + d[3] + 9 * d[4] + 6 * d[5]) % 11;
            d[8] = (9 * d[0] + d[1] + 7 * d[2] + 8 * d[3] + 7 * d[4] + 7 * d[5]) % 11;
            d[9] = (d[0] + 2 * d[1] + 9 * d[2] + 10 * d[3] + 4 * d[4] + d[5]) % 11;
            
            //Check for 10's
            if (d[6] != 10 && d[7] != 10 && d[8] != 10 && d[9] != 10) {
                
                //Add last 4 digits to string
                for (int k = 6; k < 10; k++) {
                    test = test.append(d[k]);
                }
                
                //Compare hash strings
                search = compare(target, SHA1(test.toString()));
                
            } else {
                search = false;
            }

            //if password is found
            if (search) {
                responseBox.setText(test.toString() + " is the BCH!");
            }
  
        }
        //If no passwords were found
        if (!search) {
            responseBox.setText("No such password.");
        }
    }

    //Compare generated hash with secret hash
    public static boolean compare(String one, String two) {
        return (one.equals(two));
    }

    //Check if string is alphanumeric
    public static boolean strCheck(String s) {
        if (s.isEmpty()) {
            return false;
        }
        else if (s.length() != 40){
            return false;
        }
        for (int i = 0; i < s.length(); i++) {
            if (!Character.isLetterOrDigit(s.charAt(i))) {
                return false;
            }
        }
        return true;
    }//GEN-LAST:event_jButton1MouseClicked

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(BruteForce_B.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(BruteForce_B.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(BruteForce_B.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(BruteForce_B.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new BruteForce_B().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTextField inputBox;
    private javax.swing.JButton jButton1;
    private javax.swing.JScrollPane jScrollPane1;
    private static javax.swing.JTextArea responseBox;
    // End of variables declaration//GEN-END:variables
}
